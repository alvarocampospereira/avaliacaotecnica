unit UdtmPrincipal;

interface

uses
  SysUtils, Classes, DBXpress, DB, SqlExpr, inifiles;

type
  TdtmPrincipal = class(TDataModule)
    cntConexao: TSQLConnection;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    function CnpjValido(sCnpj: String): Boolean;
    function CpfValido(sCpf: String): Boolean;
  end;

var
  dtmPrincipal: TdtmPrincipal;

implementation

{$R *.dfm}

function TdtmPrincipal.CnpjValido(sCnpj: String): Boolean;
var
  v: array[1..2] of Word;
  cnpj: array[1..14] of Byte;
  I: Byte;
begin
  Result := False;
 
  { Verificando se tem 11 caracteres }
  if Length(sCNPJ) <> 14 then
  begin
    Exit;
  end;
 
  { Conferindo se todos dígitos são iguais }
  if sCNPJ = StringOfChar('0', 14) then
    Exit;

  if sCNPJ = StringOfChar('1', 14) then
    Exit;

  if sCNPJ = StringOfChar('2', 14) then
    Exit;

  if sCnpj = StringOfChar('3', 14) then
    Exit;
 
  if sCnpj = StringOfChar('4', 14) then
    Exit;
 
  if sCnpj = StringOfChar('5', 14) then
    Exit;
 
  if sCnpj = StringOfChar('6', 14) then
    Exit;
 
  if sCnpj = StringOfChar('7', 14) then
    Exit;
 
  if sCnpj = StringOfChar('8', 14) then
    Exit;
 
  if sCnpj = StringOfChar('9', 14) then
    Exit;
 
  try
    for I := 1 to 14 do
      cnpj[i] := StrToInt(sCnpj[i]);
 
    //Nota: Calcula o primeiro dígito de verificação.
    v[1] := 5*cnpj[1] + 4*cnpj[2]  + 3*cnpj[3]  + 2*cnpj[4];
    v[1] := v[1] + 9*cnpj[5] + 8*cnpj[6]  + 7*cnpj[7]  + 6*cnpj[8];
    v[1] := v[1] + 5*cnpj[9] + 4*cnpj[10] + 3*cnpj[11] + 2*cnpj[12];
    v[1] := 11 - v[1] mod 11;
    //v[1] := IfThen(v[1] >= 10, 0, v[1]);
 
    //Nota: Calcula o segundo dígito de verificação.
    v[2] := 6*cnpj[1] + 5*cnpj[2]  + 4*cnpj[3]  + 3*cnpj[4];
    v[2] := v[2] + 2*cnpj[5] + 9*cnpj[6]  + 8*cnpj[7]  + 7*cnpj[8];
    v[2] := v[2] + 6*cnpj[9] + 5*cnpj[10] + 4*cnpj[11] + 3*cnpj[12];
    v[2] := v[2] + 2*v[1];
    v[2] := 11 - v[2] mod 11;
    v[2] := IfThen(v[2] >= 10, 0, v[2]);
 
    //Nota: Verdadeiro se os dígitos de verificação são os esperados.
    Result := ((v[1] = cnpj[13]) and (v[2] = cnpj[14]));
  except on E: Exception do
    Result := False;
  end;
end;

function TdtmPrincipal.CpfValido(sCpf: String): Boolean;
begin

end;

procedure TdtmPrincipal.DataModuleCreate(Sender: TObject);
var ini: TIniFile;
begin
  ini := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'config.ini');
  cntConexao.Params.Values['Database'] := ini.ReadString('controlenegociacao','CaminhoBD','');
  ini.Free;
end;

end.
